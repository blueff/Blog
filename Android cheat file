Introduction to Android.mk:

This document describes the syntax of Android.mk build file written to describe your C and C++ source files to the Android
NDK. To understand what follows, it is assumed that you have read the docs/OVERVIEW.html file that explains their role and
usage.

An Android.mk file is written to describe your sources to the build system. More specifically:

- The file is really a tiny GNU Makefile fragment that will be parsed one or more times by the build system. As such, you
  should try to minimize the variables you declare there and do not assume that anything is not defined during parsing.

- The file syntax is designed to allow you to group your sources into 'modules'. A module is one of the following:

    - a static library
    - a shared library

  Only shared libraries will be installed/copied to your application package. Static libraries can be used to generate
  shared libraries though.

  You can define one or more modules in each Android.mk file, and you can use the same source file in several modules.

- The build system handles many details for you. For example, you don't need to list header files or explicit dependencies between
  generated files in your Android.mk. The NDK build system will compute these automatically for you.

  This also means that, when updating to newer releases of the NDK, you should be able to benefit from new toolchain/platform support
  without having to touch your Android.mk files.

Note that the syntax is *very* close to the one used in Android.mk files distributed with the full open-source Android platform sources. While
the build system implementation that uses them is different, this is an intentional design decision made to allow reuse of 'external' libraries'
source code easier for application developers.

Simple example:

Before describing the syntax in details, let's consider the simple "hello JNI" example, i.e. the files under:

    apps/hello-jni/project

Here, we can see:

  - The 'src' directory containing the Java sources for the sample Android project.

  - The 'jni' directory containing the native source for the sample, i.e. 'jni/hello-jni.c'

    This source file implements a simple shared library that implements a native method that returns a string to the
    VM application.

  - The 'jni/Android.mk' file that describes the shared library to the NDK build system. Its content is:

   LOCAL_PATH := $(call my-dir)

   include $(CLEAR_VARS)

   LOCAL_MODULE    := hello-jni
   LOCAL_SRC_FILES := hello-jni.c

   include $(BUILD_SHARED_LIBRARY)


Now, let's explain these lines:

  LOCAL_PATH := $(call my-dir)

An Android.mk file must begin with the definition of the LOCAL_PATH variable.
It is used to locate source files in the development tree. In this example, the macro function 'my-dir', provided by the build system, is used to return
the path of the current directory (i.e. the directory containing the Android.mk file itself).

  include $(CLEAR_VARS)

The CLEAR_VARS variable is provided by the build system and points to a special GNU Makefile that will clear many LOCAL_XXX variables for you
(e.g. LOCAL_MODULE, LOCAL_SRC_FILES, LOCAL_STATIC_LIBRARIES, etc...), with the exception of LOCAL_PATH. This is needed because all build
control files are parsed in a single GNU Make execution context where all variables are global.

  LOCAL_MODULE := hello-jni

The LOCAL_MODULE variable must be defined to identify each module you describe in your Android.mk. The name must be *unique* and not contain
any spaces. Note that the build system will automatically add proper prefix and suffix to the corresponding generated file. In other words,
a shared library module named 'foo' will generate 'libfoo.so'.

IMPORTANT NOTE:
If you name your module 'libfoo', the build system will not add another 'lib' prefix and will generate libfoo.so as well.
This is to support Android.mk files that originate from the Android platform sources, would you need to use these.



  LOCAL_SRC_FILES := hello-jni.c

The LOCAL_SRC_FILES variables must contain a list of C and/or C++ source files that will be built and assembled into a module. Note that you should
not list header and included files here, because the build system will compute dependencies automatically for you; just list the source files
that will be passed directly to a compiler, and you should be good.

Note that the default extension for C++ source files is '.cpp'. It is however possible to specify a different one by defining the variable
LOCAL_CPP_EXTENSION. Don't forget the initial dot (i.e. '.cxx' will work, but not 'cxx').

  include $(BUILD_SHARED_LIBRARY)

The BUILD_SHARED_LIBRARY is a variable provided by the build system that points to a GNU Makefile script that is in charge of collecting all the
information you defined in LOCAL_XXX variables since the latest 'include $(CLEAR_VARS)' and determine what to build, and how to do it
exactly. There is also BUILD_STATIC_LIBRARY to generate a static library.

There are more complex examples in the samples directories, with commented Android.mk files that you can look at.

Reference:

This is the list of variables you should either rely on or define in an Android.mk. You can define other variables for your own usage, but
the NDK build system reserves the following variable names:

- names that begin with LOCAL_  (e.g. LOCAL_MODULE)
- names that begin with PRIVATE_, NDK_ or APP_  (used internally)
- lower-case names (used internally, e.g. 'my-dir')

If you need to define your own convenience variables in an Android.mk file, we recommend using the MY_ prefix, for a trivial example:

    MY_SOURCES := foo.c
    ifneq ($(MY_CONFIG_BAR),)
      MY_SOURCES += bar.c
    endif

    LOCAL_SRC_FILES += $(MY_SOURCES)


So, here we go:

NDK-provided variables:

These GNU Make variables are defined by the build system before your Android.mk file is parsed. Note that under certain circumstances
the NDK might parse your Android.mk several times, each with different definition for some of these variables.

CLEAR_VARS
    Points to a build script that undefines nearly all LOCAL_XXX variables listed in the "Module-description" section below. You must include
    the script before starting a new module, e.g.:

      include $(CLEAR_VARS)

BUILD_SHARED_LIBRARY
    Points to a build script that collects all the information about the module you provided in LOCAL_XXX variables and determines how to build
    a target shared library from the sources you listed. Note that you must have LOCAL_MODULE and LOCAL_SRC_FILES defined, at a minimum before
    including this file. Example usage:

      include $(BUILD_SHARED_LIBRARY)

    note that this will generate a file named lib$(LOCAL_MODULE).so

BUILD_STATIC_LIBRARY
    A variant of BUILD_SHARED_LIBRARY that is used to build a target static library instead. Static libraries are not copied into your
    project/packages but can be used to build shared libraries (see LOCAL_STATIC_LIBRARIES and LOCAL_WHOLE_STATIC_LIBRARIES described below).
    Example usage:

      include $(BUILD_STATIC_LIBRARY)

    Note that this will generate a file named lib$(LOCAL_MODULE).a
